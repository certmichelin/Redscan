/*
 * Copyright 2021 Michelin CERT (https://cert.michelin.com/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.michelin.cert.redscan;

import biz.futureware.mantisconnect.IssueData;
import com.michelin.cert.redscan.utils.mantisbt.MantisBtClient;

import com.michelin.cert.redscan.utils.models.reports.Alert;
import com.michelin.cert.redscan.utils.models.reports.Vulnerability;

import java.math.BigInteger;

import org.apache.logging.log4j.LogManager;

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * RedScan scanner main class.
 *
 * @author Maxime ESCOURBIAC
 * @author Sylvain VAISSIER
 * @author Maxence SCHMITT
 */
@SpringBootApplication
public class ScanApplication {

  //Only required if pushing data to queues
  private final RabbitTemplate rabbitTemplate;
  
  private MantisBtClient mantisBtClient;

  /**
   * Constructor to init rabbit template. Only required if pushing data to queues
   *
   * @param rabbitTemplate Rabbit template.
   */
  public ScanApplication(RabbitTemplate rabbitTemplate) {
    this.rabbitTemplate = rabbitTemplate;
    this.mantisBtClient = new MantisBtClient();
  }

  /**
   * RedScan Main methods.
   *
   * @param args Application arguments.
   */
  public static void main(String[] args) {
    SpringApplication.run(ScanApplication.class, args);
  }

  /**
   * Message executor.
   *
   * @param message Message received.
   */
  @RabbitListener(queues = {RabbitMqConfig.QUEUE_VULNERABILITIES})
  public void receiveMessage(String message) {

    try {
      LogManager.getLogger(ScanApplication.class).info(String.format("Received Vulnerability : %s", message));

      //Check if the vulnerability is already existing.
      Vulnerability vulnerability = new Vulnerability();
      vulnerability.fromJson(message);
      Alert alert = null;
      
      //Create and upsert the vulnerability in datalake.
      vulnerability.create();

      //Check if the vulnerability is already present in Mantis BT.
      IssueData[] existingTickets = mantisBtClient.getIssuesByInternalId(vulnerability.getId());
      if (existingTickets != null) {
        if (existingTickets.length == 0) {
          LogManager.getLogger(ScanApplication.class).info(String.format("Create ticket in MantisBT : %s", vulnerability.getId()));
          BigInteger createIssue = mantisBtClient.createIssue(vulnerability);
          LogManager.getLogger(ScanApplication.class).info(String.format("Ticket created in MantisBT : %s", createIssue.toString()));
          alert = new Alert(vulnerability);
        } else {
          if (existingTickets.length == 1) {
            if (mantisBtClient.shouldBeReopened(existingTickets[0])) {
              LogManager.getLogger(ScanApplication.class).info(String.format("Reopen Ticket : %s", vulnerability.getId()));
              mantisBtClient.reopenTicket(existingTickets[0].getId());
              mantisBtClient.addComment(existingTickets[0].getId(), "Ticket reopened by Redscan");
              alert = new Alert(vulnerability);
            } else {
              LogManager.getLogger(ScanApplication.class).info(String.format("Ticket still being processed : %s", vulnerability.getId()));
              mantisBtClient.addComment(existingTickets[0].getId(), "Vulnerability detected again by Redscan");
            }
          } else {
            LogManager.getLogger(ScanApplication.class).error(String.format("Error in MantisBT, duplicated ticket with same internal id : %s", vulnerability.getId()));
          }
        }
      }
      
      if (alert != null) {
        rabbitTemplate.convertAndSend(alert.getFanoutExchangeName(), "", alert.toJson());
      }
    } catch (Exception ex) {
      LogManager.getLogger(ScanApplication.class).error(String.format("Exception : %s", ex.getMessage()));
    }
  }
}
