#
# Docker compose file for REDSCAN-MAGELLAN-FRONT.
#
version: "3.8"
services:
  elasticsearch:
    image: elasticsearch:8.8.1
    ports:
    # - "exposé:inner"
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms4096m -Xmx4096m"
      - xpack.security.enabled=false
      - indices.id_field_data.enabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -s http://localhost:9200/_cluster/health -k | grep -vq '"status":"red"'
      interval: 20s
      retries: 10

  rabbitmq:
    image: rabbitmq:management
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbitmq_management path_prefix "/rabbitmq"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 3

  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    env_file:
      - resources/keycloak/keycloak.env
    volumes:
      - ./resources/keycloak/conf:/opt/keycloak/data/import/
    command:
      - start-dev 
      - --import-realm
      - --hostname-path=/auth
      - --proxy edge
      - --hostname-url https://localhost/auth/
      - --hostname-admin-url https://localhost/auth/

  proxy: 
    image: ghcr.io/deddobifu/redscan-rproxy/redscan-rproxy:6.0.1
    volumes:
      - ./resources/rproxy/apache.conf:/usr/local/apache2/conf/redscan.conf
      - ./resources/rproxy/certs/:/usr/local/apache2/conf/certs/
      - ./resources/rproxy/logs:/usr/local/apache2/logs/
    ports:
      - 443:443
    extra_hosts:
      - localhost:127.0.0.1

  cache:
    image: ghcr.io/deddobifu/redscan-cache/redscan-cache:6.0.1
    volumes:
      - ./resources/redscan-cache:/conf
    depends_on:
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  magellan-backend: 
    image: ghcr.io/deddobifu/redscan-magellan-back/redscan-magellan-back:6.0.6
    env_file:
      - ./resources/redscan-magellanback/red.env
    volumes:
      - ./resources/redscan-magellanback/conf:/conf
    depends_on:
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  magellan-front:
    build:
      context: .
      dockerfile: Dockerfile.prod
    volumes:
      - ./public:/usr/src/app/public
      - ./src:/usr/src/app/src
    ports:
    # - "exposé:inner"
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      # For prod
      - PUBLIC_URL=https://localhost/magellan
      # For dev
      #- PUBLIC_URL=http://localhost:3000/magellan
    env_file:
      - .env

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.1
    environment:
      - SERVER_BASEPATH=/kibana
      - SERVER_REWRITEBASEPATH=false
    healthcheck:
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status
      interval: 10s
      retries: 20
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibanasetup:
    image: curlimages/curl:7.80.0
    volumes:
      - ./resources/kibana:/tmp/
    depends_on:
      kibana:
        condition: service_healthy
    restart: "no"
    entrypoint: "find"
    command: "/tmp/ -iname export_kibana.ndjson -exec curl -X POST http://kibana:5601/api/saved_objects/_import?overwrite=true -H \"kbn-xsrf: true\" --form file=@{} \\;"
