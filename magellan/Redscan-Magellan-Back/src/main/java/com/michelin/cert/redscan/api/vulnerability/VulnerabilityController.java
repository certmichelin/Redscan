/*
 * Copyright 2023 Michelin CERT (https://cert.michelin.com/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.michelin.cert.redscan.api.vulnerability;

import biz.futureware.mantisconnect.IssueData;

import com.michelin.cert.redscan.api.exception.GenericException;
import com.michelin.cert.redscan.api.exception.NotFoundException;
import com.michelin.cert.redscan.utils.mantisbt.MantisBtClient;
import com.michelin.cert.redscan.utils.models.reports.Vulnerability;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

import java.math.BigInteger;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * Vulnerability controller.
 *
 * @author Maxime ESCOURBIAC
 */
@RestController
@RequestMapping("/api/mantisbt")
public class VulnerabilityController {

  private static MantisBtClient client;

  /**
   * Default constuctor.
   */
  public VulnerabilityController() {
    client = new MantisBtClient();
  }
   
  /**
   * Search issues from MantisBT.
   *
   * @param text Search string.
   * @return MantisBT issues matching the search.
   */
  @Operation(summary = "Search issues from MantisBT.", security = @SecurityRequirement(name = "bearerAuth"))
  @ApiResponses(
      value = {
        @ApiResponse(
            responseCode = "200",
            description = "MantisBT issues.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = IssueData[].class))
            }
        ),
        @ApiResponse(
            responseCode = "401",
            description = "The token was not provided",
            content = @Content(schema = @Schema(implementation = Void.class))
        ),
        @ApiResponse(
            responseCode = "403",
            description = "The provided token does not have enough privileges",
            content = @Content(schema = @Schema(implementation = Void.class))
        )
      })
  @PreAuthorize("hasAuthority('maintainer')")
  @GetMapping("issues/search")
  public IssueData[] searchIssues(@Parameter(description = "Search String") @RequestParam String text) {
    try {
      IssueData[] data = client.searchIssues(text);
      return data;
    } catch (Exception ex) {
      throw new GenericException(ex.getMessage());
    }
  }

  /**
   * Get issue by MantisBT id.
   *
   * @param id MantisBT id.
   * @return MantisBT issue.
   */
  @Operation(summary = "Get issue by MantisBT id.", security = @SecurityRequirement(name = "bearerAuth"))
  @ApiResponses(
      value = {
        @ApiResponse(
            responseCode = "200",
            description = "MantisBT issue.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = IssueData.class))
            }
        ),
        @ApiResponse(
            responseCode = "401",
            description = "The token was not provided",
            content = @Content(schema = @Schema(implementation = Void.class))
        ),
        @ApiResponse(
            responseCode = "403",
            description = "The provided token does not have enough privileges",
            content = @Content(schema = @Schema(implementation = Void.class))
        )
      })
  @PreAuthorize("hasAuthority('maintainer')")
  @GetMapping("issues/{id}")
  public IssueData getIssue(@Parameter(description = "MantisBT id.") @PathVariable BigInteger id) {
    try {
      IssueData data = client.getIssue(id);
      if (data == null) {
        throw new NotFoundException(id.toString());
      }
      return data;
    } catch (Exception ex) {
      throw new GenericException(ex.getMessage());
    }
  }

  /**
   * Get issue by Internal id. In normal case, only one issue should be found.
   *
   * @param id Internal id
   * @return MantisBT issues.
   */
  @Operation(summary = "Get issue by Internal id.", security = @SecurityRequirement(name = "bearerAuth"))
  @ApiResponses(
      value = {
        @ApiResponse(
            responseCode = "200",
            description = "MantisBT issue. In normal case, only one issue should be found.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = IssueData[].class))
            }
        ),
        @ApiResponse(
            responseCode = "401",
            description = "The token was not provided",
            content = @Content(schema = @Schema(implementation = Void.class))
        ),
        @ApiResponse(
            responseCode = "403",
            description = "The provided token does not have enough privileges",
            content = @Content(schema = @Schema(implementation = Void.class))
        )
      })
  @PreAuthorize("hasAuthority('maintainer')")
  @GetMapping("issues/internal/{id}")
  public IssueData[] getIssuesByInternalId(@Parameter(description = "MantisBT internal id.") @PathVariable String id) {
    try {
      IssueData[] data = client.getIssuesByInternalId(id);
      if (data == null) {
        throw new NotFoundException(id.toString());
      }
      return data;
    } catch (Exception ex) {
      throw new GenericException(ex.getMessage());
    }
  }

  /**
   * Create a MantisBT issue from vulnerability.
   *
   * @param vulnerability Vulnerability to create.
   * @return ID of the created ticket.
   */
  @Operation(summary = "Create a MantisBT issue from vulnerability.", security = @SecurityRequirement(name = "bearerAuth"))
  @ApiResponses(
      value = {
        @ApiResponse(
            responseCode = "200",
            description = "ID of the created ticket.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = BigInteger.class))
            }
        ),
        @ApiResponse(
            responseCode = "401",
            description = "The token was not provided",
            content = @Content(schema = @Schema(implementation = Void.class))
        ),
        @ApiResponse(
            responseCode = "403",
            description = "The provided token does not have enough privileges",
            content = @Content(schema = @Schema(implementation = Void.class))
        )
      })
  @PreAuthorize("hasAuthority('maintainer')")
  @PostMapping("issues")
  public BigInteger createIssue(@io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Vulnerability to create.") @RequestBody Vulnerability vulnerability) {
    BigInteger result = null;
    try {
      result = client.createIssue(vulnerability);
    } catch (Exception ex) {
      throw new GenericException(ex.getMessage());
    }
    return result;
  }

  /**
   * Delete MantisBT issue.
   *
   * @param id MantisBT id.
   * @return True if the deletion is successful.
   */
  @Operation(summary = "Delete MantisBT issue.", security = @SecurityRequirement(name = "bearerAuth"))
  @ApiResponses(
      value = {
        @ApiResponse(
          responseCode = "200",
          description = "Deletion state",
          content = {
            @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Boolean.class))
          } 
        ),
        @ApiResponse(
          responseCode = "401",
          description = "The token was not provided",
          content = @Content(schema = @Schema(implementation = Void.class))
        ),
        @ApiResponse(
          responseCode = "403",
          description = "The provided token does not have enough privileges",
          content = @Content(schema = @Schema(implementation = Void.class))
        )
      })
  @PreAuthorize("hasAuthority('maintainer')")
  @DeleteMapping("/issues/{id}")
  public boolean deleteIssue(@Parameter(description = "MantisBT id.") @PathVariable BigInteger id) {
    boolean result = false;
    try {
      result = client.deleteIssue(id);
    } catch (Exception ex) {
      throw new GenericException(ex.getMessage());
    }
    return result;
  }
}
